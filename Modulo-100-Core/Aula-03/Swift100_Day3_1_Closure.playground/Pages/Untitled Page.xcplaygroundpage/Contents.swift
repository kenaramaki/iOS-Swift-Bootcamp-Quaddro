//: Closure

// No Swift funÃ§Ãµes podem ser atribuÃ­das a variÃ¡veis
// Depois disso, podemos enviar estas variÃ¡veis por
// mÃ©todos e chamÃ¡-las sempre onde for preciso

// Closure: Pegar um trecho de cÃ³digo e colocar dentro de uma variÃ¡vel
// () -> () : nÃ£o recebe, nÃ£o retorna

// Exemplo de closure, sem parÃ¢metros e sem retorno
// com inferÃªncia de tipo

let faladorDeOi = {
    print("Oi")
}

faladorDeOi()

// Exemplo de closure, sem parÃ¢metro, com tipagem
let faladorDeTchau:()->() = {
    print("Tchau")
}

faladorDeTchau()

//
func repeteCincoVezes(closure:()->()){ // tipo do parÃ¢metro: closure
    for _ in 1...5{
        closure()
    }
}

repeteCincoVezes(faladorDeTchau)
repeteCincoVezes(faladorDeOi)

repeteCincoVezes({print("closure")})


// Closure com parÃ¢metro e retorno

let criadorDeBoaTarde:(paraQuem:String) -> String = { quem in
    return "Boa tarde, \(quem)"
}

criadorDeBoaTarde(paraQuem: "Ken")
criadorDeBoaTarde(paraQuem: "Helena")

//
func saudaÃ§ÃµesParaGeral( criador:(String)->(String)){
    let nomes = ["Ana","Maria","Braga"]
    for nome in nomes {
        let saudaÃ§Ã£o = criador(nome)
        print(saudaÃ§Ã£o)
    }
}

saudaÃ§ÃµesParaGeral(criadorDeBoaTarde)

// Closure da funÃ§Ã£o soma
let soma:(Int, Int) -> (Int) = { v1, v2 in
    return v1 + v2
}

func executaOperaÃ§Ã£o(v1:Int,_ v2:Int, operaÃ§Ã£o:(Int,Int)->(Int)) -> Int {
    return operaÃ§Ã£o(v1,v2)
}

executaOperaÃ§Ã£o(130, 8, operaÃ§Ã£o: soma)

// Quick Fix: FaÃ§a tambÃ©m subtraÃ§Ã£o e multiplicaÃ§Ã£o
let subtraÃ§Ã£o:(Int,Int) -> (Int) = { v1, v2 in
    return v1 - v2
}

let multiplicaÃ§Ã£o:(Int, Int) -> (Int) = { v1, v2 in
    return v1 * v2
}

executaOperaÃ§Ã£o(10, 5, operaÃ§Ã£o: subtraÃ§Ã£o)
executaOperaÃ§Ã£o(10, 5, operaÃ§Ã£o: -)
executaOperaÃ§Ã£o(10, 5, operaÃ§Ã£o: multiplicaÃ§Ã£o)
executaOperaÃ§Ã£o(10, 5, operaÃ§Ã£o: *)
executaOperaÃ§Ã£o(10, 5, operaÃ§Ã£o: soma)
executaOperaÃ§Ã£o(10, 5, operaÃ§Ã£o: +)

executaOperaÃ§Ã£o(10, 5, operaÃ§Ã£o: %)
executaOperaÃ§Ã£o(10, 5, operaÃ§Ã£o: /)

let ğŸ¤–:(Int,Int) -> (Int) = { // podemos omitir 'v1, v2 in'
    return max($0, $1)
}

executaOperaÃ§Ã£o(10, 5, operaÃ§Ã£o: ğŸ¤–)
